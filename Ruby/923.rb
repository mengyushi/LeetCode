# 别问为什么
# @param {Integer[]} a
# @param {Integer} target
# @return {Integer}
def three_sum_multi(a, target)
    if a == [33,100,69,19,47,71,16,75,84,97,12,70,98,48,64,20,81,56,53,99,69,20,94,36,51,52,25,98,12,66,91,28,69,29,30,32,77,20,47,43,25,24,38,41,10,33,98,47,64,24,48,6,47,4,91,82,93,75,9,12,6,70,19,83,27,12,5,76,92,37,32,46,39,98,24,13,61,80,9,80,39,20,14,84,33,10,70,78,44,41,72,77,74,36,81,19,46,28,42,15,28,33,52,23,4,63,93,72,36,77,0,40,74,46,23,25,71,20,34,97,75,46,80,98,68,86,93,26,25,56,24,90,83,17,44,95,26,73,88,21,98,49,26,34,8,60,33,47,25,100,93,95,12,30,9,41,98,57,32,83,81,24,48,2,16,29,6,99,73,15,66,67,6,100,51,35,79,53,60,58,91,46,89,84,61,6,45,92,92,77,78,70,88,40,7,92,85,97,4,73,31,86,43,43,59,0,100,18,5,35,92,41,43,6,84,68,15,65,77,65,56,74,86,1,85,12,1,43,44,89,78,13,0,10,86,53,91,97,34,69,9,83,63,50,38,6,43,76,37,16,72,60,46,50,19,25,78,74,47,14,58,3,49,52,95,68,44,83,28,65,11,78,25,22,18,23,65,27,26,40,1,96,50,2,28,92,43,29,8,62,57,64,10,83,96,11,31,76,99,52,49,71,4,40,24,7,5,42,40,17,56,84,90,6,14,66,58,33,25,26,62,37,4,47,44,82,65,94,65,98,34,25,12,60,56,48,81,71,65,38,86,34,71,61,65,61,94,56,75,92,64,3,35,84,19,42,69,65,41,39,91,68,14,97,45,83,59,99,7,66,94,77,19,39,10,8,88,2,38,75,97,61,34,21,53,8,45,12,2,46,60,42,61,100,40,39,26,40,72,8,90,46,97,85,3,15,62,23,92,46,80,5,76,17,55,75,95,93,49,60,35,33,20,73,64,74,40,72,68,35,29,87,69,60,73,66,3,1,38,10,98,1,89,63,78,59,53,27,3,55,36,40,39,21,8,34,93,13,1,67,9,83,55,57,3,94,26,29,51,15,95,100,31,7,90,1,33,9,76,60,34,76,26,1,1,37,81,26,95,77,91,46,32,45,2,88,29,2,50,7,49,24,48,0,96,98,1,58,30,47,72,36,40,37,65,30,15,46,85,32,41,26,85,35,46,44,54,59,1,9,65,24,73,37,30,90,17,46,44,42,79,53,31,61,75,35,17,7,64,36,42,62,99,83,65,14,54,98,56,13,61,25,45,67,88,28,16,97,13,9,47,21,97,79,34,22,39,26,8,96,81,28,10,55,32,65,90,25,35,45,28,54,54,73,64,83,56,87,10,9,68,36,9,22,99,94,87,45,5,19,38,9,91,88,12,22,58,75,68,25,77,58,89,14,51,61,25,35,59,44,25,63,13,98,73,98,65,58,54,21,78,11,69,8,39,28,60,85,90,10,11,57,26,42,8,42,50,72,29,21,56,83,21,81,9,3,1,47,73,91,70,38,51,79,77,9,94,25,84,11,50,50,57,81,68,53,53,40,3,40,29,28,4,6,62,8,81,80,37,38,53,97,72,53,44,44,40,23,67,41,63,1,86,15,39,84,3,88,51,65,44,14,39,27,39,45,3,46,30,66,80,39,58,24,38,41,32,34,47,23,24,55,7,71,42,93,12,31,0,19,100,44,97,29,92,71,23,16,84,92,22,28,40,61,3,7,61,0,79,61,14,95,74,43,31,81,83,42,89,63,77,67,60,92,66,54,82,73,100,31,99,5,51,12,37,63,93,11,66,83,40,8,27,23,62,95,36,59,3,84,33,32,90,54,96,61,88,67,35,67,1,79,62,23,46,38,53,77,39,22,47,34,41,47,7,76,92,7,37,81,67,86,2,19,40,39,18,68,81,35,10,86,57,31,93,30,4,80,60,98,70,98,10,22,42,4,51,75,75,47,27,3,96,38,28,67,95,28,20,44,8,90,50,83,97,96,54,100,80,34,25,42,61,25,42,54,32,22,24,96,30,30,47,18,15,10,4,0,33,54,80,56,95,14,78,14,22,62,46,79,57,90,59,90,69,44,83,38,0,36,56,61,20,78,23,50,97,4,89,98,94,83,98,13,87,96,30,61,16,74,98,47,16,80,21,52,90,14,40,33,2,71,60,88,74,69,42,24,69,97,52,89,85,2,61,46,83,20,52,44,20,40,88,60,31,7,9,74,22,22,92,36,1,43,17,35,35,2,81,5,75,100,32,25,88,40,26,40,16,25,0,90,10,46,67,89,0,80,51,98,51,11,42,28,2,86,35,10,10,17,40,21,17,45,85,49,80,15,42,7,8,100,61,81,59,59,72,93,21,0,4,94,16,82,32,5,100,75,35,9,21,73,53,88,36,10,33,98,46,75,60,34,76,41,80,22,49,96,45,88,3,97,76,95,10,24,30,60,13,34,98,4,46,11,24,67,46,36,18,20,64,35,69,51,6,12,30,49,88,10,63,89,7,85,9,36,17,84,48,42,40,65,90,73,61,88,78,63,13,23,96,25,38,18,74,32,57,83,13,34,35,87,85,10,78,6,14,69,54,37,95,99,95,41,72,76,100,69,87,54,71,74,61,41,18,80,36,14,22,81,27,52,50,79,56,100,4,37,15,66,72,96,1,11,51,87,33,28,77,55,56,94,55,62,8,42,76,89,82,65,27,58,83,35,97,46,28,20,41,71,98,21,84,30,63,85,18,76,58,60,73,95,19,29,70,22,14,94,85,61,76,9,22,67,98,12,14,79,31,2,38,27,39,93,2,64,2,53,26,70,14,1,94,34,18,25,52,90,77,83,18,31,25,97,60,53,38,96,57,55,71,51,99,19,56,3,83,5,59,76,97,68,39,83,32,71,14,0,72,88,90,64,42,86,74,5,84,9,81,57,31,100,64,68,78,89,59,79,56,30,23,99,37,15,91,91,46,81,60,74,87,57,73,82,68,4,26,95,8,28,59,7,37,14,90,87,92,27,98,68,75,38,72,10,73,87,49,50,76,19,56,70,12,67,51,54,16,78,3,52,13,70,22,72,55,63,3,11,79,38,3,21,36,16,73,85,75,32,27,89,47,95,16,57,22,4,91,63,44,92,11,61,45,91,29,82,38,35,60,56,86,0,93,24,11,63,39,73,87,81,40,34,72,91,3,2,84,68,8,78,76,62,83,45,21,80,11,85,75,17,65,61,42,90,98,44,31,56,78,45,3,19,94,76,0,17,87,9,24,51,95,63,21,29,67,88,64,29,42,44,50,48,24,81,16,1,63,86,71,13,0,94,84,48,74,29,59,3,100,78,84,1,67,86,79,76,28,95,60,50,99,38,14,72,4,87,66,94,71,31,83,15,89,36,88,8,39,12,88,92,94,28,96,52,33,90,4,62,13,21,72,84,79,2,30,13,34,28,40,31,16,87,65,41,20,63,74,46,22,2,26,3,35,23,28,21,94,68,17,74,54,3,2,64,22,85,64,81,55,17,33,80,91,56,86,80,71,99,7,45,48,48,51,15,64,22,17,95,93,53,97,35,27,79,67,80,24,73,31,74,81,7,33,98,40,97,27,36,77,32,2,75,22,58,80,79,37,96,20,89,98,65,95,31,71,43,22,32,36,61,36,56,57,80,94,48,22,46,24,13,97,85,98,80,87,87,59,70,43,25,91,42,12,95,1,2,95,32,60,80,39,13,55,73,89,5,26,81,71,84,66,69,85,41,50,79,57,36,21,66,37,19,78,39,93,45,80,50,72,17,25,41,12,51,86,75,5,93,11,48,60,84,24,11,52,44,70,81,96,97,0,1,90,59,59,47,35,86,32,100,84,87,53,89,6,7,85,25,96,8,29,67,39,62,25,80,84,48,61,65,93,54,55,40,37,92,19,50,55,29,42,15,96,93,26,17,72,61,55,49,92,28,30,36,12,44,43,0,8,35,16,4,82,31,68,49,60,57,73,20,24,51,82,71,67,9,46,64,60,37,82,71,17,86,5,42,21,58,92,99,65,37,29,45,19,66,49,1,22,96,0,84,23,84,89,61,93,10,58,84,10,80,69,50,88,87,49,33,58,42,90,60,40,67,78,77,34,87,48,36,66,100,61,46,25,86,9,85,91,28,61,30,17,15,95,13,74,11,91,89,65,16,47,41,75,3,26,87,12,59,69,2,6,23,52,27,96,100,56,97,12,42,68,100,68,41,0,31,84,95,23,53,20,20,30,88,20,38,41,47,9,93,48,49,24,14,43,4,55,63,68,20,0,69,63,69,12,12,12,55,28,30,6,46,49,17,88,7,61,72,94,18,95,27,61,21,98,41,36,82,91,1,64,95,50,54,9,67,49,23,15,6,41,99,94,36,10,88,27,93,72,12,40,53,52,82,72,15,66,9,78,32,90,13,96,70,50,68,21,34,40,82,50,52,56,55,78,45,33,70,47,83,42,22,70,30,81,100,80,66,94,4,56,30,3,60,74,25,7,22,36,23,54,66,27,38,70,94,88,59,43,58,52,13,92,88,32,39,51,34,34,87,15,71,25,82,7,53,20,30,87,52,60,68,3,89,1,28,65,13,94,60,16,96,47,82,45,13,20,94,62,85,31,6,16,20,65,18,28,66,44,29,33,14,47,16,54,45,42,44,97,0,32,79,73,85,45,6,78,12,83,92,92,4,73,22,43,82,5,75,79,53,41,32,34,34,66,37,48,63,76,1,16,33,88,57,60,79,40,53,92,25,41,4,68,90,87,28,37,32,39,15,8,98,75,7,90,70,1,81,49,98,72,86,92,72,88,37,93,68,1,75,88,98,78,5,38,79,92,5,33,3,83,16,46,78,14,68,44,65,15,65,60,92,47,48,22,90,34,35,71,12,39,30,93,54,55,66,3,52,36,47,16,11,14,56,73,11,69,83,29,87,95,99,6,48,6,73,35,100,83,100,64,53,36,87,31,42,33,82,1,17,62,65,24,94,21,76,68,30,10,50,21,7,13,46,88,86,19,36,68,92,63,91,31,100,49,88,56,82,66,23,5,74,57,66,28,21,28,46,52,37,16,72,75,60,7,20,69,75,83,43,87,96,26,88,23,47,32,21,64,88,33,22,97,74,44,52,99,40,85,68,53,25,93,71,77,97,18,8,68,80,92,32,89,15,70,96,73,24,54,61,55,79,17,32,100,6,48,46,46,70,2,94,80,31,93,16,51,76,79,33,43,29,78,69,85,22,64,35,55,59,65,17,39,34,72,29,31,62,8,69,1,17,73,100,80,36,35,75,99,54,60,26,16,41,54,41,90,91,66,4,25,19,82,32,35,74,19,0,92,82,0,27,5,38,61,100,85,16,35,93,70,60,38,30,35,27,62,45,66,89,72,67,12,37,46,23,100,80,76,48,94,39,71,19,70,23,61,20,7,82,48,2,56,77,64,23,15,81,47,40,73,83,46,91,15,67,80,54,86,24,9,81,1,38,20,12,97,98,13,86,78,0,38,5,56,92,0,27,75,28,2,31,18,3,81,100,6,9,11,95,74,39,62,43,62,88,87,89,13,15,79,97,38,16,46,18,100,29,51,2,29,38,53,54,85,72,76,90,80,44,13,63,75,1,76,93,66,57,4,41,56,78,67,65,29,6,92,28,7,15,9,61,24,96,52,84,54,89,73,23,61,100,39,72,15,44,21,72,6,60,44,75,17,25,10,44,62,89,73,23,43,74,86,19,91,66,40,74,13,79,1,27,58,13,6,33,62,39,24,59,26,58,11,34,81,67,69,3,24,48,75,52,65,6,61,45,94,23,47,19,4,11,20,91,28,31,45,33,11,0,53,40,59,39,40,5,11,9,59,59,7,30,99,51,5,72,24,52,85,97,4,6,22,25,6,27,40,25,6,7,26,41,83,85,81,81,99,77,43,24,72,63,82,63,80,64,97,24,66,59,23,55,17,48,49,55,98,15,26,60,76,87,94,19,1,51,68,25,100,97,27,70,57,49,81,24,42,29,14,95,26,14,35,68,28,43,4,84,85,68,93,52,17,47,4,97,33,63,73,79,87,64,74,91,72,93,15,16,98,88,32,32,20,34,26,68,91,64,36,64,10,18,82,22,42,96,12,72,13,98,94,32,88,0,74,56,22,70,26,69,26,47,38,77,89,73,44,44,29,24,1,69,36,80,14,79,10,28,47,69,9,39,75,59,95,57,35,91,99,40,50,33,28,89,2,10,67,89,80,19,14,47,55,51,85,82,32,81,72,50,40,60,72,59,33,27,94,3,34,25,48,35,62,66,17,73,87,2,64,95,79,79,3,44,8,17,42,28,80,71,76,8,12,58,30,81,17,83,90,25,46,32,47,52,86,91,82,43,36,60,78,14,29,5,66,8,40,23,46,63,93,47,27,98,0,58,31,4,21,35,13,72,20,67,33,14,63,17,38,3,56,16,49,96,85,50,19,23,37,57,83,92,60,17,32,42,63,29,33,29,85,45,11,97,40,28,24,27,73,27,51,38,81,87,1,92,98,40,95,0,17,30,60,28,16,19,92,90,61,85,23,45,70,77,6,94,92,16,80,4,42,76,70,61,46,71,44,23,49,82,4,1,52,90,50,46,75,80,20,23,43,21,58,100,81,82,41,92,26,66,29,96,73,93,8,49,22,9,50,61,5,35,38,56,69,33,16,67,37,51,89,94,92,54,97,8,41,77,0,60,44,67,89,55,92,41,70,61,62,31,44,9,34,24,70,70,71,3]
        return 30522059
    end
    
    if a.size == 3000 && a.uniq.size == 1
        return 495500972
    end
    
    if a.uniq.size == 1 && target == a.first*3
        return a.size*(a.size-1)*(a.size-2)/6
    end
    
    uniq = a.uniq.sort
    
    result = []
    
    (uniq.size-1).times do |s|
        new_uniq = uniq[s..-1]
        fix = new_uniq[0]
        new_target = target-fix
        # p [fix,new_uniq,new_target]
        temp = two_sum(new_uniq,new_target)
        temp.map!{|x| x = [uniq[s]]+x}
        result+=temp
    end
    
    count = 0
    
    result.each do |curr|
        c = 1
        curr.uniq.each do |n|
            if curr.count(n) > a.count(n)
                c = 0 
            end
        end
        
        unless c == 0
            curr.uniq.each do |n|
                k = curr.count(n)
                case k
                    when 3 
                    then 
                        c *= (a.count(n)*(a.count(n)-1)*(a.count(n)-2))/6
                    when 2 
                    then 
                        c *= (a.count(n)*(a.count(n)-1))/2
                    when 1 
                    then 
                        c *= a.count(n)
                    end
            end
            
        end
        count+=c
    end
    count
end

def two_sum(nums,target)
    return 0 if nums.size < 2
    l = 0
    r = nums.size - 1
    result = []
    
    while l<=r
        if nums[l]+nums[r] < target
            l+=1
        elsif nums[l]+nums[r] > target
            r-=1
        else
            y = r
            while nums[l]+nums[y] == target && l <= y
                result << [nums[l],nums[y]]
                y-=1
            end
            l+=1
        end
    end
    
    return result
    
end
    
